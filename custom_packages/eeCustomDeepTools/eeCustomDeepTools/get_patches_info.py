#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This script contains a class that gather all the TFRecords stored in the
# target Google Drive or Google Cloud storage bucket and return them as a
# list to later be converted into a TFRecord dataset. The class also allows
# to get the mixer file from the target path. This is a .json file
# automatically generated by Earth Engine when exporting image patches.
# More info can be found here:
# https://developers.google.com/earth-engine/guides/tfrecord#mixer
#
# Author: Davide Lomeo
# Email: davide.lomeo20@imperial.ac.uk
# GitHub: https://github.com/acse-2020/acse2020-acse9-finalreport-acse-dl1420-3
# Date: 24 July 2021
# Version: 0.1.0

import json
import subprocess

__all__ = ['GetFilesInfo']


class GetFilesInfo:
    """
    Class that allows the user load the filenames of the TFrecords
    exported from Earth Engine and the relative Mixer file. The Mixer
    file is a .json file automatically generated by Earth Engine that
    stores a dictionary of information about the exported patches.
    The class is capable to handle files stored in both Google Drive
    and Google Cloud Storage.

    Parameters
    ----------
    storage: str, optional
        the type of storage used: 'gdrive' or 'gstorage' (default is 'gdrive')

    Functions
    ---------
    get_mixer(json_file)
        Get the dictionary from the stored json file
    get_files(records_path, file_prefix)
        Loads the TFrecords and mixer using the input/ list and file prefix
    """

    def __init__(self, storage='gdrive'):
        "Class constructor"

        super().__init__()
        self.storage = storage

    def get_mixer(self, json_file):
        """
        Function that loads the mixer file produced automatically by
        Earth Egnine when exported TFRecords to the target storage.

        Parameters
        ----------
        json_file : str
            a path to the stored .json file in string format

        Returns
        -------
        dictionary
            The mixer file containing the info of the exported patches
        """

        if not isinstance(json_file, str):
            print('ERROR: the input .json path needs to be in str format')
            return None

        if self.storage == 'gdrive':
            with open(json_file) as js:
                mixer = json.load(js)

        if self.storage == 'gstorage':
            proc = subprocess.Popen(
                ["gsutil", "cat", json_file], stdout=subprocess.PIPE)
            output = proc.stdout.read()
            mixer = json.loads(output)

        return mixer

    def get_files(self, records_path, file_prefix):
        """
        Function that generates a list with all the TFRecords saved in
        the input path (for gdrive storage) or input list (for gstorage) that
        have the input prefix. The mixer .json file stored in the same location
        is returned to be later used to extract the mixer file as a dictionary
        and to export any generated asset to Earth Engine. The path to the
        mixer file is returned for reproducibility, in order to capture any
        unintentional file renaming and always find the mixer file inside the
        folder with the TFRecords.

        Parameters
        ----------
        records_path : gdrive Path or gstorage list of files
            Path to file or list of files. depending on storage used
        file_prefix : str
            Prefix of the stored TFRecords and mixer files

        Returns
        -------
        list and str
            A list of all the TFRecords and the path to the mixer.json
        """

        # Checking if using Googe Drive storage an storing the filenames
        if self.storage == 'gdrive':
            if not records_path.exists():
                print('ERROR: the input path does not exist. Try again')
                return None

            # Getting all the filenames
            files = [f.name for f in records_path.iterdir()
                     if file_prefix in f.stem]

            # storing TFRecords ans mixer file separately
            file_list = []
            json_file = None
            for f in files:
                if f.endswith('.tfrecord.gz'):
                    file_list.append(str(records_path) + '/' + f)
                elif f.endswith('.json'):
                    json_file = str(records_path) + '/' + f

        # Checking if using Googe Cloud Storage and exctracing the filenames
        if self.storage == 'gstorage':
            if not isinstance(records_path, list):
                print('ERROR: for gstorage, the input needs to be a list')
                return None

            # Getting all the filenames
            files = [s for s in records_path if file_prefix in s]

            # storing TFRecords ans mixer file separately
            file_list = []
            json_file = None
            for f in files:
                if f.endswith('.tfrecord.gz'):
                    file_list.append(f)
                elif f.endswith('.json'):
                    json_file = f

        return file_list, json_file
